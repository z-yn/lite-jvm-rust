use crate::cesu8_byte_buffer::ByteBuffer;
use crate::class_file_error::{ClassFileError, Result};

//https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5

#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub enum Instruction {
    Aaload,
    Aastore,
    Aconst_null,
    Aload(u8),
    Aload_0,
    Aload_1,
    Aload_2,
    Aload_3,
    Anewarray(u16),
    Areturn,
    Arraylength,
    Astore(u8),
    Astore_0,
    Astore_1,
    Astore_2,
    Astore_3,
    Athrow,
    Baload,
    Bastore,
    Bipush(u8),
    Caload,
    Castore,
    Checkcast(u16),
    D2f,
    D2i,
    D2l,
    Dadd,
    Daload,
    Dastore,
    Dcmpg,
    Dcmpl,
    Dconst_0,
    Dconst_1,
    Ddiv,
    Dload(u8),
    Dload_0,
    Dload_1,
    Dload_2,
    Dload_3,
    Dmul,
    Dneg,
    Drem,
    Dreturn,
    Dstore(u8),
    Dstore_0,
    Dstore_1,
    Dstore_2,
    Dstore_3,
    Dsub,
    Dup,
    Dup_x1,
    Dup_x2,
    Dup2,
    Dup2_x1,
    Dup2_x2,
    F2d,
    F2i,
    F2l,
    Fadd,
    Faload,
    Fastore,
    Fcmpl,
    Fcmpg,
    Fconst_0,
    Fconst_1,
    Fconst_2,
    Fdiv,
    Fload(u8),
    Fload_0,
    Fload_1,
    Fload_2,
    Fload_3,
    Fmul,
    Fneg,
    Frem,
    Freturn,
    Fstore(u8),
    Fstore_0,
    Fstore_1,
    Fstore_2,
    Fstore_3,
    Fsub,
    Getfield(u16),
    Getstatic(u16),
    Goto(u16),
    Goto_w(u32),
    I2b,
    I2c,
    I2d,
    I2f,
    I2l,
    I2s,
    Iadd,
    Iaload,
    Iand,
    Iastore,
    Iconst_m1,
    Iconst_0,
    Iconst_1,
    Iconst_2,
    Iconst_3,
    Iconst_4,
    Iconst_5,
    Idiv,
    If_acmpeq(u16),
    If_acmpne(u16),
    If_icmpeq(u16),
    If_icmpne(u16),
    If_icmplt(u16),
    If_icmpge(u16),
    If_icmpgt(u16),
    If_icmple(u16),
    Ifeq(u16),
    Ifne(u16),
    Iflt(u16),
    Ifge(u16),
    Ifgt(u16),
    Ifle(u16),
    Ifnonnull(u16),
    Ifnull(u16),
    Iinc(u8, i8),
    Iload(u8),
    Iload_0,
    Iload_1,
    Iload_2,
    Iload_3,
    Imul,
    Ineg,
    Instanceof(u16),
    Invokedynamic(u16),
    Invokeinterface(u16, u8),
    Invokespecial(u16),
    Invokestatic(u16),
    Invokevirtual(u16),
    Ior,
    Irem,
    Ireturn,
    Ishl,
    Ishr,
    Istore(u8),
    Istore_0,
    Istore_1,
    Istore_2,
    Istore_3,
    Isub,
    Iushr,
    Ixor,
    Jsr(u16),
    Jsr_w(u32),
    L2d,
    L2f,
    L2i,
    Ladd,
    Laload,
    Land,
    Lastore,
    Lcmp,
    Lconst_0,
    Lconst_1,
    Ldc(u8),
    Ldc_w(u16),
    Ldc2_w(u16),
    Ldiv,
    Lload(u8),
    Lload_0,
    Lload_1,
    Lload_2,
    Lload_3,
    Lmut,
    Lneg,
    Lookupswitch,
    Lor,
    Lrem,
    Lreturn,
    Lshl,
    Lshr,
    Lstore(u8),
    Lstore_0,
    Lstore_1,
    Lstore_2,
    Lstore_3,
    Lsub,
    Lushr,
    Lxor,
    Monitorenter,
    Monitorexit,
    Multianewarray(u16, u8),
    New(u16),
    NewArray(u8),
    Nop,
    Pop,
    Pop2,
    Putfield(u16),
    Putstatic(u16),
    Ret(u8),
    Return,
    Saload,
    Sastore,
    Sipush(i16),
    Swap,
    Tableswitch,
    Wide,
}

pub fn read_one_instruction(buffer: &mut ByteBuffer) -> Result<Instruction> {
    let op_code = buffer.read_u8()?;
    let instruction = match op_code {
        0x32 => Instruction::Aaload,
        0x53 => Instruction::Aastore,
        0x1 => Instruction::Aconst_null,
        0x19 => Instruction::Aload(buffer.read_u8()?),
        0x2a => Instruction::Aload_0,
        0x2b => Instruction::Aload_1,
        0x2c => Instruction::Aload_2,
        0x2d => Instruction::Aload_3,
        0xbd => Instruction::Anewarray(buffer.read_u16()?),
        0xb0 => Instruction::Areturn,
        0xbe => Instruction::Arraylength,
        0x3a => Instruction::Astore(buffer.read_u8()?),
        0x4b => Instruction::Astore_0,
        0x4c => Instruction::Astore_1,
        0x4d => Instruction::Astore_2,
        0x4e => Instruction::Astore_3,
        0xbf => Instruction::Athrow,
        0x33 => Instruction::Baload,
        0x54 => Instruction::Bastore,
        0x10 => Instruction::Bipush(buffer.read_u8()?),
        0x34 => Instruction::Caload,
        0x55 => Instruction::Castore,
        0xc0 => Instruction::Checkcast(buffer.read_u16()?),
        0x90 => Instruction::D2f,
        0x8e => Instruction::D2i,
        0x8f => Instruction::D2l,
        0x63 => Instruction::Dadd,
        0x31 => Instruction::Daload,
        0x52 => Instruction::Dastore,
        0x98 => Instruction::Dcmpg,
        0x97 => Instruction::Dcmpl,
        0xe => Instruction::Dconst_0,
        0xf => Instruction::Dconst_1,
        0x6f => Instruction::Ddiv,
        0x18 => Instruction::Dload(buffer.read_u8()?),
        0x26 => Instruction::Dload_0,
        0x27 => Instruction::Dload_1,
        0x28 => Instruction::Dload_2,
        0x29 => Instruction::Dload_3,
        0x6b => Instruction::Dmul,
        0x77 => Instruction::Dneg,
        0x73 => Instruction::Drem,
        0xaf => Instruction::Dreturn,
        0x39 => Instruction::Dstore(buffer.read_u8()?),
        0x47 => Instruction::Dstore_0,
        0x48 => Instruction::Dstore_1,
        0x49 => Instruction::Dstore_2,
        0x4a => Instruction::Dstore_3,
        0x67 => Instruction::Dsub,
        0x59 => Instruction::Dup,
        0x5a => Instruction::Dup_x1,
        0x5b => Instruction::Dup_x2,
        0x5c => Instruction::Dup2,
        0x5d => Instruction::Dup2_x1,
        0x5e => Instruction::Dup2_x2,
        0x8d => Instruction::F2d,
        0x8b => Instruction::F2i,
        0x8c => Instruction::F2l,
        0x62 => Instruction::Fadd,
        0x30 => Instruction::Faload,
        0x51 => Instruction::Fastore,
        0x95 => Instruction::Fcmpl,
        0x96 => Instruction::Fcmpg,
        0xb => Instruction::Fconst_0,
        0xc => Instruction::Fconst_1,
        0xd => Instruction::Fconst_2,
        0x6e => Instruction::Fdiv,
        0x17 => Instruction::Fload(buffer.read_u8()?),
        0x22 => Instruction::Fload_0,
        0x23 => Instruction::Fload_1,
        0x24 => Instruction::Fload_2,
        0x25 => Instruction::Fload_3,
        0x6a => Instruction::Fmul,
        0x76 => Instruction::Fneg,
        0x72 => Instruction::Frem,
        0xae => Instruction::Freturn,
        0x38 => Instruction::Fstore(buffer.read_u8()?),
        0x43 => Instruction::Fstore_0,
        0x44 => Instruction::Fstore_1,
        0x45 => Instruction::Fstore_2,
        0x46 => Instruction::Fstore_3,
        0x66 => Instruction::Fsub,
        0xb4 => Instruction::Getfield(buffer.read_u16()?),
        0xb2 => Instruction::Getstatic(buffer.read_u16()?),
        0xa7 => Instruction::Goto(buffer.read_u16()?),
        0xc8 => Instruction::Goto_w(buffer.read_u32()?),
        0x91 => Instruction::I2b,
        0x92 => Instruction::I2c,
        0x87 => Instruction::I2d,
        0x86 => Instruction::I2f,
        0x85 => Instruction::I2l,
        0x93 => Instruction::I2s,
        0x60 => Instruction::Iadd,
        0x2e => Instruction::Iaload,
        0x7e => Instruction::Iand,
        0x4f => Instruction::Iastore,
        0x2 => Instruction::Iconst_m1,
        0x3 => Instruction::Iconst_0,
        0x4 => Instruction::Iconst_1,
        0x5 => Instruction::Iconst_2,
        0x6 => Instruction::Iconst_3,
        0x7 => Instruction::Iconst_4,
        0x8 => Instruction::Iconst_5,
        0x6c => Instruction::Idiv,
        0xa5 => Instruction::If_acmpeq(buffer.read_u16()?),
        0xa6 => Instruction::If_acmpne(buffer.read_u16()?),
        0x9f => Instruction::If_icmpeq(buffer.read_u16()?),
        0xa0 => Instruction::If_icmpne(buffer.read_u16()?),
        0xa1 => Instruction::If_icmplt(buffer.read_u16()?),
        0xa2 => Instruction::If_icmpge(buffer.read_u16()?),
        0xa3 => Instruction::If_icmpgt(buffer.read_u16()?),
        0xa4 => Instruction::If_icmple(buffer.read_u16()?),
        0x99 => Instruction::Ifeq(buffer.read_u16()?),
        0x9a => Instruction::Ifne(buffer.read_u16()?),
        0x9b => Instruction::Iflt(buffer.read_u16()?),
        0x9c => Instruction::Ifge(buffer.read_u16()?),
        0x9d => Instruction::Ifgt(buffer.read_u16()?),
        0x9e => Instruction::Ifle(buffer.read_u16()?),
        0xc7 => Instruction::Ifnonnull(buffer.read_u16()?),
        0xc6 => Instruction::Ifnull(buffer.read_u16()?),
        0x84 => Instruction::Iinc(buffer.read_u8()?, buffer.read_i8()?),
        0x15 => Instruction::Iload(buffer.read_u8()?),
        0x1a => Instruction::Iload_0,
        0x1b => Instruction::Iload_1,
        0x1c => Instruction::Iload_2,
        0x1d => Instruction::Iload_3,
        0x68 => Instruction::Imul,
        0x74 => Instruction::Ineg,
        0xc1 => Instruction::Instanceof(buffer.read_u16()?),
        0xba => {
            let invokedynamic = Instruction::Invokedynamic(buffer.read_u16()?);
            if buffer.read_u16()? != 0 {
                return Err(ClassFileError::InvalidClassData(format!(
                    "expected two zero bytes after invokedynamic"
                )));
            }
            invokedynamic
        }
        0xb9 => {
            let invokeinterface =
                Instruction::Invokeinterface(buffer.read_u16()?, buffer.read_u8()?);
            if buffer.read_u8()? != 0 {
                return Err(ClassFileError::InvalidClassData(format!(
                    "expected one zero bytes after invokeinterface"
                )));
            }
            invokeinterface
        }
        0xb7 => Instruction::Invokespecial(buffer.read_u16()?),
        0xb8 => Instruction::Invokestatic(buffer.read_u16()?),
        0xb6 => Instruction::Invokevirtual(buffer.read_u16()?),
        0x80 => Instruction::Ior,
        0x70 => Instruction::Irem,
        0xac => Instruction::Ireturn,
        0x78 => Instruction::Ishl,
        0x7a => Instruction::Ishr,
        0x36 => Instruction::Istore(buffer.read_u8()?),
        0x3b => Instruction::Istore_0,
        0x3c => Instruction::Istore_1,
        0x3d => Instruction::Istore_2,
        0x3e => Instruction::Istore_3,
        0x64 => Instruction::Isub,
        0x7c => Instruction::Iushr,
        0x82 => Instruction::Ixor,
        0xa8 => Instruction::Jsr(buffer.read_u16()?),
        0xc9 => Instruction::Jsr_w(buffer.read_u32()?),
        0x8a => Instruction::L2d,
        0x89 => Instruction::L2f,
        0x88 => Instruction::L2i,
        0x61 => Instruction::Ladd,
        0x2f => Instruction::Laload,
        0x7f => Instruction::Land,
        0x50 => Instruction::Lastore,
        0x94 => Instruction::Lcmp,
        0x9 => Instruction::Lconst_0,
        0xa => Instruction::Lconst_1,
        0x12 => Instruction::Ldc(buffer.read_u8()?),
        0x13 => Instruction::Ldc_w(buffer.read_u16()?),
        0x14 => Instruction::Ldc2_w(buffer.read_u16()?),
        0x6d => Instruction::Ldiv,
        0x16 => Instruction::Lload(buffer.read_u8()?),
        0x1e => Instruction::Lload_0,
        0x1f => Instruction::Lload_1,
        0x20 => Instruction::Lload_2,
        0x21 => Instruction::Lload_3,
        0x69 => Instruction::Lmut,
        0x75 => Instruction::Lneg,
        //TODO 实现Lookupswitch
        0xab => Instruction::Lookupswitch,
        0x81 => Instruction::Lor,
        0x71 => Instruction::Lrem,
        0xad => Instruction::Lreturn,
        0x79 => Instruction::Lshl,
        0x7b => Instruction::Lshr,
        0x37 => Instruction::Lstore(buffer.read_u8()?),
        0x3f => Instruction::Lstore_0,
        0x40 => Instruction::Lstore_1,
        0x41 => Instruction::Lstore_2,
        0x42 => Instruction::Lstore_3,
        0x65 => Instruction::Lsub,
        0x7d => Instruction::Lushr,
        0x83 => Instruction::Lxor,
        0xc2 => Instruction::Monitorenter,
        0xc3 => Instruction::Monitorexit,
        0xc5 => Instruction::Multianewarray(buffer.read_u16()?, buffer.read_u8()?),
        0xbb => Instruction::New(buffer.read_u16()?),
        //Array Type	atype
        // T_BOOLEAN	4
        // T_CHAR	5
        // T_FLOAT	6
        // T_DOUBLE	7
        // T_BYTE	8
        // T_SHORT	9
        // T_INT	10
        // T_LONG	11
        0xbc => Instruction::NewArray(buffer.read_u8()?),
        0x0 => Instruction::Nop,
        0x57 => Instruction::Pop,
        0x58 => Instruction::Pop2,
        0xb5 => Instruction::Putfield(buffer.read_u16()?),
        0xb3 => Instruction::Putstatic(buffer.read_u16()?),
        0xa9 => Instruction::Ret(buffer.read_u8()?),
        0xb1 => Instruction::Return,
        0x35 => Instruction::Saload,
        0x56 => Instruction::Sastore,
        0x11 => Instruction::Sipush(buffer.read_i16()?),
        0x5f => Instruction::Swap,
        //TODO
        0xaa => Instruction::Tableswitch,
        //TODO 实现Wide的一些指令
        0xc4 => Instruction::Wide,

        op_code => {
            return Err(ClassFileError::InvalidCode(format!(
                "Invalid Op Code {op_code}"
            )));
        }
    };
    Ok(instruction)
}
